```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String
  role         Role
  createdAt    DateTime  @default(now())
  profile      Profile?
  proposals    Proposal[] @relation("UserProposals")
  contractsAsClient Contract[] @relation("ClientContracts")
  contractsAsFreelancer Contract[] @relation("FreelancerContracts")
  messagesSent Message[] @relation("MessageSender")
  uploads      File[] @relation("Uploads")
  reviewsLeft  Review[] @relation("Reviewer")
  reviewsRight Review[] @relation("Reviewee")
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id         String   @id @default(uuid())
  tokenHash  String
  userId     String
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Profile {
  id             String   @id @default(uuid())
  userId         String   @unique
  bio            String?
  skills         String[]
  portfolio      Json?
  hourlyRate     Float?
  ratingAvg      Float?   @default(0)
  completedJobs  Int      @default(0)
  user           User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String     @id @default(uuid())
  clientId    String
  title       String
  description String
  category    String
  budgetMin   Float
  budgetMax   Float
  status      ProjectStatus
  deadline    DateTime?
  attachments Json?
  createdAt   DateTime   @default(now())
  client      User       @relation(fields: [clientId], references: [id])
  proposals   Proposal[]
  contract    Contract?
}

model Proposal {
  id           String     @id @default(uuid())
  projectId    String
  freelancerId String
  coverLetter  String
  price        Float
  days         Int
  status       ProposalStatus
  createdAt    DateTime   @default(now())
  project      Project    @relation(fields: [projectId], references: [id])
  freelancer   User       @relation("UserProposals", fields: [freelancerId], references: [id])
  contract     Contract?
}

model Contract {
  id                    String          @id @default(uuid())
  projectId             String
  proposalId            String
  clientId              String
  freelancerId          String
  amount                Float
  appliedPlatformFeePct Float           @default(7.0)
  platformFeeAmount     Float
  providerFeeAmount     Float
  netAmount             Float
  escrowStatus          EscrowStatus
  createdAt             DateTime        @default(now())
  project               Project         @relation(fields: [projectId], references: [id])
  proposal              Proposal        @relation(fields: [proposalId], references: [id])
  client                User            @relation("ClientContracts", fields: [clientId], references: [id])
  freelancer            User            @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  transactions          Transaction[]
  review                Review?
}

model Transaction {
  id                String        @id @default(uuid())
  contractId        String
  type              TransactionType
  amount            Float
  platformFeeAmount Float
  providerFeeAmount Float
  netAmount         Float
  providerTxId      String?
  createdAt         DateTime     @default(now())
  contract          Contract     @relation(fields: [contractId], references: [id])
}

model Conversation {
  id           String      @id @default(uuid())
  participants String[]
  messages     Message[]
}

model Message {
  id             String      @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime    @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User        @relation("MessageSender", fields: [senderId], references: [id])
}

model File {
  id         String   @id @default(uuid())
  url        String
  uploaderId String
  uploadedAt DateTime @default(now())
  uploader   User     @relation("Uploads", fields: [uploaderId], references: [id])
}

model Review {
  id           String   @id @default(uuid())
  reviewerId   String
  revieweeId   String
  contractId   String
  rating       Int
  comment      String
  createdAt    DateTime @default(now())
  reviewer     User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee     User     @relation("Reviewee", fields: [revieweeId], references: [id])
  contract     Contract @relation(fields: [contractId], references: [id])
}

model AdminSettings {
  id                      String @id @default(uuid())
  mercadoPagoPublicKey     String?
  mercadoPagoAccessToken   String?
  mercadoPagoClientId      String?
  mercadoPagoClientSecret  String?
  mercadoPagoSandbox       Boolean @default(true)
  platformFeePct           Float   @default(7.0)
  feePayerConfig           Json?
  updatedAt                DateTime @updatedAt
}

enum Role {
  CLIENT
  FREELANCER
  ADMIN
}

enum ProjectStatus {
  DRAFT
  OPEN
  CLOSED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EscrowStatus {
  CREATED
  HELD
  RELEASED
  REFUNDED
}

enum TransactionType {
  DEPOSIT
  RELEASE
  REFUND
  FEE
}
```